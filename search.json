[{"title":"timeline","url":"/2022/10/18/timeline/","content":"<div class=\"wrap\">\n  <div class=\"button-container\">\n    <form id=\"sorted\">\n      <div class=\"button-title\">Sort by</div>\n      <div class=\"button-content\">\n        <label><input type=\"radio\" name=\"sort\" value=\"startDate\" checked>  start date </label>\n        <label><input type=\"radio\" name=\"sort\" value=\"endDate\">  end date </label>\n        <label><input type=\"radio\" name=\"sort\" value=\"timespanInDays\"> duration </label>\n      </div>\n      <div class=\"button-description\">Start / end date of the chronologically first / last interval; cumulative duration of all intervals of an item</div>\n    </form>\n  </div>\n  <div class=\"button-container\">\n    <form id=\"reorder\">\n      <div class=\"button-title\">In the following order</div>\n      <div class=\"button-content\">\n        <label><input type=\"radio\" name=\"order\" value=\"ascending\" checked> ascending </label>\n        <label><input type=\"radio\" name=\"order\" value=\"descending\"> descending </label>\n      </div>\n      <div class=\"button-description\">Visually from top to bottom</div>\n    </form>\n  </div>\n  <div id=\"reading-timeline\">\n  </div>\n</div>\n\n<style>\n.button-container {\n  margin-bottom: 17px;\n}\n\n.button-title {\n  font: 700 0.9rem sans-serif;\n  margin-bottom: 3px;\n}\n\n.button-content {\n  display: inline-block;\n  margin: 5px 10px 3px 0;\n  font-size: 0.85em;\n}\n\n.button-description {\n  font-size: 0.85rem;\n  font-style: italic;\n  margin-top: 3px;\n}\n\n.tick line {\n  stroke: currentColor;\n}\n\n.tick text {\n  fill: currentColor;\n  text-anchor: middle;\n}\n\n.tick text,\n.interval text {\n  font-family: sans-serif;\n  font-size: 10px;\n}\n\n.interval line {\n  stroke-width: 2;\n}\n\n.guide-line {\n  stroke: #efefef;\n}\n\n.subinterval {\n  stroke: #000000;\n}\n\n.interval text,\n.interval a[href] text {\n  fill: #808080;\n}\n\n.interval a[href] .hoverable-area {\n  fill: #ffffff; /* has to be white, not 'none' */\n}\n\n.interval a[href]:hover {\n  text-decoration: none;\n}\n\n.interval a[href]:hover text {\n  fill: #3182bd;\n}\n\n.interval a[href]:hover .guide-line {\n  stroke: #f3f8fb;\n}\n\n.interval a[href]:hover .subinterval {\n  stroke: #3182bd;\n}\n</style>\n\n<script>\nif ('d3' in window) {\n\n// plain objects containing string literals, including arrays (of plain objects containing string literals)\nliterals = [\n  {\n    name: \"Karl Marx (died aged 59)\",\n    startDate: \"1818-05-05\",\n    endDate: \"1883-03-14\",\n    url: \"https://zh.m.wikipedia.org/wiki/卡尔·马克思\"\n  },\n  {\n    name: \"Фёдор Михайлович Достоевский (died aged 64)\",\n    startDate: \"1821-11-11\",\n    endDate: \"1881-02-09\",\n    url: \"https://zh.m.wikipedia.org/wiki/费奥多尔·陀思妥耶夫斯基\"\n  },\n  {\n    name: \"Лев Николаевич Толстой (died aged 82)\",\n    startDate: \"1828-09-09\",\n    endDate: \"1910-11-20\",\n    url: \"https://zh.m.wikipedia.org/wiki/列夫·托爾斯泰\"\n  },\n  {\n    name: \"Sigmund Freud Lifetime (died aged 83)\",\n    startDate: \"1856-05-06\",\n    endDate: \"1939-09-23\",\n    url: \"https://zh.wikipedia.org/wiki/西格蒙德·弗洛伊德\"\n  },\n  {\n    name: \"Alfred Adler Lifetime (died aged 67)\",\n    startDate: \"1870-02-07\",\n    endDate: \"1937-05-28\",\n    url: \"https://zh.wikipedia.org/wiki/阿尔弗雷德·阿德勒\"\n  },\n  {\n    name: \"Die Traumdeutung\",\n    startDate: \"1899-01-01\",\n    endDate: \"1899-11-30\",\n    url: \"https://zh.wikipedia.org/wiki/夢的解析\"\n  },\n  {\n    name: \"World War I\",\n    startDate: \"1914-07-28\",\n    endDate: \"1918-11-11\",\n    url: \"https://zh.wikipedia.org/wiki/第一次世界大战\"\n  },\n  {\n    name: \"World War II\",\n    startDate: \"1931-01-01\",\n    endDate: \"1945-09-02\",\n    url: \"https://zh.wikipedia.org/wiki/第二次世界大战\"\n  },\n  {\n    name: \"鲁迅 Lifetime (died aged 55)\",\n    startDate: \"1881-09-25\",\n    endDate: \"1936-10-19\",\n    url: \"https://zh.wikipedia.org/wiki/鲁迅\"\n  },\n  {\n    name: \"芥川 龍之介 Lifetime (died aged 35)\",\n    startDate: \"1892-03-01\",\n    endDate: \"1927-07-24\",\n    url: \"https://zh.wikipedia.org/wiki/芥川龙之介\"\n  },\n  {\n    name: \"George Smith Patton, Jr. Lifetime (died aged 60)\",\n    startDate: \"1885-11-11\",\n    endDate: \"1945-12-21\",\n    url: \"https://zh.wikipedia.org/wiki/乔治·巴顿\"\n  },\n  {\n    name: \"Richard P. Feynman Lifetime (died aged 70)\",\n    startDate: \"1918-05-11\",\n    endDate: \"1988-02-15\",\n    url: \"https://zh.wikipedia.org/wiki/理查德·費曼\"\n  },\n  {\n    name: \"Vietnam War\",\n    startDate: \"1955-01-01\", //\n    endDate: \"1975-12-30\", //\n    url: \"https://zh.wikipedia.org/wiki/越南战争\"\n  },\n  {\n    name: \"Alan Mathison Turing Lifetime (died aged 41)\",\n    startDate: \"1912-06-23\", //\n    endDate: \"1954-06-07\", //\n    url: \"https://zh.wikipedia.org/wiki/艾伦·图灵\"\n  },\n  {\n    name: \"John von Neumann Lifetime (died aged 53)\",\n    startDate: \"1903-12-28\", //\n    endDate: \"1957-02-08\", //\n    url: \"https://zh.wikipedia.org/wiki/约翰·冯·诺伊曼\"\n  },\n  {\n    name: \"Virginia Woolf Lifetime (died aged 59)\",\n    startDate: \"1882-01-25\", //\n    endDate: \"1941-03-28\", //\n    url: \"https://zh.wikipedia.org/wiki/弗吉尼亚·吴尔夫\"\n  },\n  {\n    name: \"Simone de Beauvoir Lifetime (died aged 78)\",\n    startDate: \"1908-01-09\", //\n    endDate: \"1986-04-14\", //\n    url: \"https://zh.wikipedia.org/wiki/西蒙·德·波娃\"\n  },\n  {\n    name: \"Le Deuxième Sexe\",\n    startDate: \"1949-01-01\",\n    endDate: \"1949-12-30\",\n    url: \"https://zh.wikipedia.org/wiki/第二性\"\n  },\n  {\n    name: \"Stephen Jay Gould  Lifetime (died aged 61)\", //\n    startDate: \"1941-09-10\",\n    endDate: \"2002-05-20\",\n    url: \"https://zh.wikipedia.org/wiki/史蒂芬·古爾德\"\n  },\n  {\n    name: \"Das Kapital: Kritik der politischen Ökonomie\",\n    subintervals: [\n      {\n        startDate: \"1867\", //\n        endDate: \"1867-12-31\" // approximated\n      },\n      {\n        startDate: \"1885\",\n        endDate: \"1885-12-31\" // approximated\n      },\n      {\n        startDate: \"1894\",\n        endDate: \"1894-12-31\" // approximated\n      },\n      {\n        startDate: \"1938\",\n        endDate: \"1938-12-31\" // approximated\n      },\n    ],\n    url: \"https://zh.wikipedia.org/wiki/资本论\"\n  }\n]\n\nparseInterval = (interval) => {\n  return {\n    startDate: d3.isoParse(interval.startDate),\n    endDate: d3.isoParse(interval.endDate)\n  }\n}\n\ncreateSubintervals = (literal) => {\n  if (literal.subintervals !== undefined) {\n    return literal.subintervals.map(parseInterval);\n  }\n\n  return [parseInterval(literal)];\n}\n\ngetTimespanInDays = (subintervals) => d3.sum(subintervals, d => d3.utcDay.count(d.startDate, d.endDate))\n\ncreateInterval = (literal) => {\n  const interval = {\n    name: literal.name\n  };\n\n  interval.subintervals = createSubintervals(literal);\n  interval.startDate = d3.min(interval.subintervals, d => d.startDate);\n  interval.endDate = d3.max(interval.subintervals, d => d.endDate);\n  interval.timespanInDays = getTimespanInDays(interval.subintervals);\n\n  if (literal.url !== undefined) {\n    interval.url = literal.url;\n  }\n\n  return interval;\n}\n\nintervals = literals.map(createInterval)\n\norder = document.querySelector('input[name=\"order\"]:checked').value;\nsortBy = document.querySelector('input[name=\"sort\"]:checked').value;\n\nd3.selectAll(\"input\").on(\"change\", function() {\n    order = document.querySelector('input[name=\"order\"]:checked').value;\n    sortBy = document.querySelector('input[name=\"sort\"]:checked').value;\n    sortedIntervals = intervals.slice()\n      .sort((a, b) => d3[order](a[sortBy], b[sortBy]));\n    svg.selectAll(\"*\").remove()\n    redraw(sortedIntervals)\n    console.log(this.value, this.name)\n});\n\nsortedIntervals = intervals.slice()\n  .sort((a, b) => d3[order](a[sortBy], b[sortBy]));\n\nwidth = document.getElementById('reading-timeline').offsetWidth;\n\ncreateCanvas = () =>\n  d3.select(\"#reading-timeline\")\n    .append(\"svg\")\n    .attr(\"class\", \"timeline\")\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n\nmargin = {top: 30, right: 0, bottom: 10, left: 0}\nintervalHeight = 20\n\nheight = margin.top + (intervals.length * intervalHeight) + margin.bottom;\n\naddHorizontalAxis = (parent) =>\n  parent.append(\"g\")\n    .attr(\"class\", \"x-axis\")\n    .attr(\"transform\", `translate(0,${margin.top})`)\n    .call(d3.axisTop(scale))\n    .call(cleanAxis);\n\nrange = [margin.left, width - (margin.left + margin.right)]\n\ndomain = [\n   d3.min(intervals, d => d.startDate),\n   d3.max(intervals, d => d.endDate)\n ]\n\n scale = d3.scaleTime()\n   .range(range)\n   .domain(domain)\n\n cleanAxis = (container) => {\n   const attributes = [\n     \"fill\",\n     \"font-family\",\n     \"font-size\",\n     \"text-anchor\"\n   ];\n\n   attributes.forEach(d => container.attr(d, null));\n\n   container.select(\".domain\")\n     .remove();\n\n   container.selectAll(\".tick\")\n     .attr(\"opacity\", null);\n\n   container.selectAll(\".tick line\")\n     .attr(\"stroke\", null);\n\n   container.selectAll(\".tick text\")\n     .attr(\"fill\", null);\n }\n\n addIntervals = (parent, intervals) => {\n   const container = parent.append(\"g\")\n     .attr(\"class\", \"intervals\")\n     .attr(\"transform\", `translate(0,${margin.top + 15})`);\n\n   intervals.forEach((interval, index) => addInterval(container, interval, index));\n }\n\naddInterval = (parent, interval, index) => {\n  let container = parent.append(\"g\")\n    .attr(\"class\", \"interval\");\n\n  const startPoint = {\n    x: scale(interval.startDate),\n    y: intervalHeight * index\n  };\n\n  const endPoint = {\n    x: scale(interval.endDate),\n    y: startPoint.y\n  };\n\n  if (interval.url) {\n    container = container.append(\"a\")\n      .attr(\"href\", interval.url)\n      .attr(\"target\", \"_blank\"); // hangs in the notebook's iframe otherwise\n\n    const intervalWidth = endPoint.x - startPoint.x;\n    container.append(\"rect\")\n      .attr(\"class\", \"hoverable-area\")\n      .attr(\"x\", startPoint.x)\n      .attr(\"y\", startPoint.y)\n      .attr(\"width\", intervalWidth)\n      .attr(\"height\", intervalHeight);\n  }\n\n  addSubintervals(container, startPoint, endPoint, interval.subintervals);\n  addText(container, startPoint, endPoint, interval.name);\n}\n\naddSubintervals = (parent, startPoint, endPoint, subintervals) => {\n  if (subintervals.length > 1) {\n    parent.append(\"line\")\n      .attr(\"class\", \"guide-line\") // bridges interval gaps\n      .attr(\"x1\", startPoint.x)\n      .attr(\"y1\", startPoint.y)\n      .attr(\"x2\", endPoint.x)\n      .attr(\"y2\", endPoint.y);\n  }\n\n  subintervals.forEach(subinterval => {\n    parent.append(\"line\")\n      .attr(\"class\", \"subinterval\")\n      .attr(\"x1\", scale(subinterval.startDate))\n      .attr(\"y1\", startPoint.y)\n      .attr(\"x2\", scale(subinterval.endDate))\n      .attr(\"y2\", endPoint.y);\n  });\n\n  addText = (parent, startPoint, endPoint, text) => {\n    const remainingPlaneWidth = range[1] - startPoint.x;\n    const textWidth = measureWidth(text);\n    if (textWidth <= remainingPlaneWidth) {\n      parent.append(\"text\")\n        .attr(\"x\", startPoint.x)\n        .attr(\"y\", startPoint.y + 10)\n        .attr(\"text-anchor\", \"start\")\n        .text(text);\n    } else {\n      parent.append(\"text\")\n        .attr(\"x\", endPoint.x)\n        .attr(\"y\", endPoint.y + 10)\n        .attr(\"text-anchor\", \"end\")\n        .text(text);\n    }\n  }\n\nmeasureWidth = (text) => {\n  const context = document.createElement(\"canvas\")\n    .getContext(\"2d\");\n\n  // '10px sans-serif' as default font\n  return context.measureText(text).width;\n}\n\n}\n\nsvg = createCanvas()\n\nredraw = (data) =>\n  svg\n   .call(addHorizontalAxis)\n   .call(addIntervals, data)\n   .node()\n\nredraw(sortedIntervals)\n\n}\n\n</script>\n"}]